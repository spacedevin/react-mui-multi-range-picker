name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to release'
        required: true
        type: choice
        options:
          - both
          - free
          - pro
      bump:
        description: 'Version bump type'
        required: false
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
        default: auto

permissions:
  contents: write
  packages: write

jobs:
  detect-changes:
    name: Detect Package Changes
    runs-on: ubuntu-latest
    outputs:
      free_changed: ${{ steps.changes.outputs.free_changed }}
      pro_changed: ${{ steps.changes.outputs.pro_changed }}
      free_commits: ${{ steps.analyze.outputs.free_commits }}
      pro_commits: ${{ steps.analyze.outputs.pro_commits }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect Changes
        id: changes
        run: |
          # Get last tags for each package
          FREE_LAST_TAG=$(git tag -l "@spacedevin/react-mui-multi-range-picker@*" | sort -V | tail -1)
          PRO_LAST_TAG=$(git tag -l "@spacedevin/react-mui-pro-multi-range-picker@*" | sort -V | tail -1)
          
          echo "Free last tag: $FREE_LAST_TAG"
          echo "Pro last tag: $PRO_LAST_TAG"
          
          # Check for changes since last tag
          if [ -z "$FREE_LAST_TAG" ]; then
            FREE_CHANGED="true"
          else
            FREE_CHANGES=$(git diff --name-only $FREE_LAST_TAG HEAD -- packages/MuiMultiDateRangePicker | wc -l)
            FREE_CHANGED=$( [ "$FREE_CHANGES" -gt "0" ] && echo "true" || echo "false" )
          fi
          
          if [ -z "$PRO_LAST_TAG" ]; then
            PRO_CHANGED="true"
          else
            PRO_CHANGES=$(git diff --name-only $PRO_LAST_TAG HEAD -- packages/MuiMultiDateRangePickerPro | wc -l)
            PRO_CHANGED=$( [ "$PRO_CHANGES" -gt "0" ] && echo "true" || echo "false" )
          fi
          
          # Override if manual workflow with specific package
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            case "${{ inputs.package }}" in
              free)
                FREE_CHANGED="true"
                PRO_CHANGED="false"
                ;;
              pro)
                FREE_CHANGED="false"
                PRO_CHANGED="true"
                ;;
              both)
                FREE_CHANGED="true"
                PRO_CHANGED="true"
                ;;
            esac
          fi
          
          echo "free_changed=$FREE_CHANGED" >> $GITHUB_OUTPUT
          echo "pro_changed=$PRO_CHANGED" >> $GITHUB_OUTPUT
          
          echo "Free package changed: $FREE_CHANGED"
          echo "Pro package changed: $PRO_CHANGED"

      - name: Analyze Commits
        id: analyze
        run: |
          # Get commits since last tag for each package
          FREE_LAST_TAG=$(git tag -l "@spacedevin/react-mui-multi-range-picker@*" | sort -V | tail -1)
          PRO_LAST_TAG=$(git tag -l "@spacedevin/react-mui-pro-multi-range-picker@*" | sort -V | tail -1)
          
          # Get commit range
          FREE_RANGE="${FREE_LAST_TAG:-$(git rev-list --max-parents=0 HEAD)}..HEAD"
          PRO_RANGE="${PRO_LAST_TAG:-$(git rev-list --max-parents=0 HEAD)}..HEAD"
          
          # Get commits for each package
          FREE_COMMITS=$(git log $FREE_RANGE --pretty=format:"%s" -- packages/MuiMultiDateRangePicker)
          PRO_COMMITS=$(git log $PRO_RANGE --pretty=format:"%s" -- packages/MuiMultiDateRangePickerPro)
          
          # Also include commits with scopes
          FREE_COMMITS_SCOPE=$(git log $FREE_RANGE --pretty=format:"%s" | grep -E "^(feat|fix|perf)(\(free\)|:)")
          PRO_COMMITS_SCOPE=$(git log $PRO_RANGE --pretty=format:"%s" | grep -E "^(feat|fix|perf)(\(pro\)|:)")
          
          # Combine
          FREE_ALL="$FREE_COMMITS
          $FREE_COMMITS_SCOPE"
          PRO_ALL="$PRO_COMMITS
          $PRO_COMMITS_SCOPE"
          
          # Save to file for next step
          echo "$FREE_ALL" > /tmp/free_commits.txt
          echo "$PRO_ALL" > /tmp/pro_commits.txt
          
          echo "free_commits<<EOF" >> $GITHUB_OUTPUT
          echo "$FREE_ALL" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "pro_commits<<EOF" >> $GITHUB_OUTPUT
          echo "$PRO_ALL" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  release-free:
    name: Release Free Package
    needs: detect-changes
    if: needs.detect-changes.outputs.free_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install Dependencies
        run: |
          cd packages/MuiMultiDateRangePicker
          npm ci

      - name: Calculate Version
        id: version
        run: |
          cd packages/MuiMultiDateRangePicker
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine bump type
          BUMP_TYPE="patch"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.bump }}" != "auto" ]; then
            BUMP_TYPE="${{ inputs.bump }}"
          else
            # Analyze commits
            COMMITS="${{ needs.detect-changes.outputs.free_commits }}"
            
            if echo "$COMMITS" | grep -qE "^(feat|fix|perf).*!:|BREAKING CHANGE:"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -qE "^feat(\(|:)"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "Bump type: $BUMP_TYPE"
          
          # Calculate new version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Update Version
        run: |
          cd packages/MuiMultiDateRangePicker
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Build
        run: |
          cd packages/MuiMultiDateRangePicker
          npm run build

      - name: Publish to NPM
        run: |
          cd packages/MuiMultiDateRangePicker
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git Tag
        run: |
          TAG="@spacedevin/react-mui-multi-range-picker@${{ steps.version.outputs.version }}"
          git add packages/MuiMultiDateRangePicker/package.json
          git commit -m "chore(release): $TAG"
          git tag -a "$TAG" -m "$TAG"
          git push origin main --follow-tags

      - name: Generate Changelog
        id: changelog
        run: |
          cd packages/MuiMultiDateRangePicker
          LAST_TAG=$(git tag -l "@spacedevin/react-mui-multi-range-picker@*" | sort -V | tail -2 | head -1)
          
          if [ -z "$LAST_TAG" ]; then
            RANGE="HEAD"
          else
            RANGE="$LAST_TAG..HEAD"
          fi
          
          CHANGELOG=$(git log $RANGE --pretty=format:"- %s (%h)" -- packages/MuiMultiDateRangePicker)
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "@spacedevin/react-mui-multi-range-picker@${{ steps.version.outputs.version }}"
          release_name: "Free Package v${{ steps.version.outputs.version }}"
          body: |
            ## ðŸŽ‰ @spacedevin/react-mui-multi-range-picker v${{ steps.version.outputs.version }}
            
            **Type**: ${{ steps.version.outputs.bump_type }} release
            
            ### Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### Installation
            ```bash
            npm install @spacedevin/react-mui-multi-range-picker@${{ steps.version.outputs.version }}
            ```
          draft: false
          prerelease: false

  release-pro:
    name: Release Pro Package
    needs: detect-changes
    if: needs.detect-changes.outputs.pro_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install Dependencies
        run: |
          cd packages/MuiMultiDateRangePickerPro
          npm ci

      - name: Calculate Version
        id: version
        run: |
          cd packages/MuiMultiDateRangePickerPro
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine bump type
          BUMP_TYPE="patch"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.bump }}" != "auto" ]; then
            BUMP_TYPE="${{ inputs.bump }}"
          else
            # Analyze commits
            COMMITS="${{ needs.detect-changes.outputs.pro_commits }}"
            
            if echo "$COMMITS" | grep -qE "^(feat|fix|perf).*!:|BREAKING CHANGE:"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -qE "^feat(\(|:)"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "Bump type: $BUMP_TYPE"
          
          # Calculate new version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Update Version
        run: |
          cd packages/MuiMultiDateRangePickerPro
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Build
        run: |
          cd packages/MuiMultiDateRangePickerPro
          npm run build

      - name: Publish to NPM
        run: |
          cd packages/MuiMultiDateRangePickerPro
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git Tag
        run: |
          TAG="@spacedevin/react-mui-pro-multi-range-picker@${{ steps.version.outputs.version }}"
          git add packages/MuiMultiDateRangePickerPro/package.json
          git commit -m "chore(release): $TAG"
          git tag -a "$TAG" -m "$TAG"
          git push origin main --follow-tags

      - name: Generate Changelog
        id: changelog
        run: |
          cd packages/MuiMultiDateRangePickerPro
          LAST_TAG=$(git tag -l "@spacedevin/react-mui-pro-multi-range-picker@*" | sort -V | tail -2 | head -1)
          
          if [ -z "$LAST_TAG" ]; then
            RANGE="HEAD"
          else
            RANGE="$LAST_TAG..HEAD"
          fi
          
          CHANGELOG=$(git log $RANGE --pretty=format:"- %s (%h)" -- packages/MuiMultiDateRangePickerPro)
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "@spacedevin/react-mui-pro-multi-range-picker@${{ steps.version.outputs.version }}"
          release_name: "Pro Package v${{ steps.version.outputs.version }}"
          body: |
            ## ðŸŽ‰ @spacedevin/react-mui-pro-multi-range-picker v${{ steps.version.outputs.version }}
            
            **Type**: ${{ steps.version.outputs.bump_type }} release
            
            ### Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### Installation
            ```bash
            npm install @spacedevin/react-mui-pro-multi-range-picker@${{ steps.version.outputs.version }}
            ```
          draft: false
          prerelease: false

